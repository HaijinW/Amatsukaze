<Window x:Class="Amatsukaze.Views.ConfigWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
        xmlns:v="clr-namespace:Amatsukaze.Views"
        xmlns:vm="clr-namespace:Amatsukaze.ViewModels"
        mc:Ignorable="d" 
        Title="サーバアドレス" Height="120" Width="240"
        d:DataContext="{d:DesignInstance {x:Type vm:ConfigWindowViewModel}}">

    <i:Interaction.Triggers>

        <!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
        <!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
        <!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->

        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->
        <l:InteractionMessageTrigger MessageKey="Close" Messenger="{Binding Messenger}">
            <l:WindowInteractionMessageAction/>
        </l:InteractionMessageTrigger>

    </i:Interaction.Triggers>

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <TextBlock x:Name="textBlock" HorizontalAlignment="Left" TextWrapping="Wrap" Text="サーバIP" VerticalAlignment="Top" Margin="0,1,0,0"/>
        <TextBlock x:Name="textBlockPort" HorizontalAlignment="Left" Margin="0,23,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="50" Text="ポート"/>
        <TextBox x:Name="textBox" HorizontalAlignment="Left" Height="18" Margin="0,0,-0.333,0" TextWrapping="Wrap" Text="{Binding ServerIP}" VerticalAlignment="Top" Width="183" Grid.Column="1" TabIndex="1"/>
        <TextBox x:Name="textBoxPort" HorizontalAlignment="Left" Height="18" Margin="0,20,0,0" TextWrapping="Wrap" Text="{Binding ServerPort}" VerticalAlignment="Top" Width="183" Grid.Column="1" TabIndex="1"/>
        <Button x:Name="button" Content="OK" Grid.Column="1" HorizontalAlignment="Left" Margin="28,66,0,0" VerticalAlignment="Top" Width="75" Command="{Binding OkCommand, Mode=OneWay}"/>
        <Button x:Name="button1" Content="Cancel" Grid.Column="1" HorizontalAlignment="Left" Margin="108,66,0,0" VerticalAlignment="Top" Width="75">
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="Click">
                    <l:WindowInteractionMessageAction>
                        <l:DirectInteractionMessage>
                            <l:WindowActionMessage/>
                        </l:DirectInteractionMessage>
                    </l:WindowInteractionMessageAction>
                </i:EventTrigger>
            </i:Interaction.Triggers>
        </Button>
        <Label Content="{Binding Description}" HorizontalAlignment="Left" Margin="16,38,0,0" VerticalAlignment="Top" Grid.ColumnSpan="2" Width="217"/>

    </Grid>
</Window>
