<Window x:Class="Amatsukaze.Views.ConfigWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
        xmlns:v="clr-namespace:Amatsukaze.Views"
        xmlns:vm="clr-namespace:Amatsukaze.ViewModels"
        mc:Ignorable="d" 
        Title="AmatsukazeClient" Width="244.889"
        d:DataContext="{d:DesignInstance {x:Type vm:ConfigWindowViewModel}}"
        SizeToContent="Height" Loaded="Window_Loaded" >

    <Window.Resources>
        <ResourceDictionary Source="CommonResources.xaml"/>
    </Window.Resources>
    
    <i:Interaction.Triggers>

        <!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
        <!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
        <!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->

        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->
        <l:InteractionMessageTrigger MessageKey="Close" Messenger="{Binding Messenger}">
            <l:WindowInteractionMessageAction/>
        </l:InteractionMessageTrigger>

    </i:Interaction.Triggers>

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <TextBlock Text="{Binding Description}" TextWrapping="Wrap" Grid.ColumnSpan="2" Margin="5" Foreground="Red"/>

        <TextBlock Grid.Row="1" Text="サーバアドレスを入力してください" Margin="6,5,0,0" VerticalAlignment="Top" Grid.ColumnSpan="2" HorizontalAlignment="Left" Width="217"/>
        <TextBlock Grid.Row="1" HorizontalAlignment="Left" TextWrapping="Wrap" Text="サーバIP" VerticalAlignment="Top" Margin="0,26,0,0"/>
        <TextBlock Grid.Row="1" HorizontalAlignment="Left" Margin="0,47,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="50" Text="ポート"/>
        <TextBox Grid.Row="1" Height="18" Margin="0,24,5,0" TextWrapping="Wrap" Text="{Binding ServerIP}" VerticalAlignment="Top" Grid.Column="1" TabIndex="1"/>
        <TextBox Grid.Row="1" Height="18" Margin="0,44,5,0" TextWrapping="Wrap" Text="{Binding ServerPort}" VerticalAlignment="Top" Grid.Column="1" TabIndex="1"/>
        <Button Grid.Row="1" Content="OK" Grid.Column="1" Margin="0,67,85,10" VerticalAlignment="Top" Command="{Binding OkCommand, Mode=OneWay}" HorizontalAlignment="Right" Width="75"/>
        <Button Grid.Row="1" Content="Cancel" Grid.Column="1" Margin="0,67,5,10" VerticalAlignment="Top" HorizontalAlignment="Right" Width="75">
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="Click">
                    <l:WindowInteractionMessageAction>
                        <l:DirectInteractionMessage>
                            <l:WindowActionMessage/>
                        </l:DirectInteractionMessage>
                    </l:WindowInteractionMessageAction>
                </i:EventTrigger>
            </i:Interaction.Triggers>
        </Button>

    </Grid>
</Window>
