<UserControl x:Class="Amatsukaze.Views.QueuePanel"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
             xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:vm="clr-namespace:Amatsukaze.ViewModels" 
             xmlns:m="clr-namespace:Amatsukaze.Models" 
             xmlns:c="clr-namespace:Amatsukaze.Components" 
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300"
             d:DataContext="{d:DesignInstance {x:Type vm:QueueViewModel}}">

    <UserControl.Resources>
        <ResourceDictionary Source="CommonResources.xaml"/>
    </UserControl.Resources>
    
    <i:Interaction.Triggers>
        <l:InteractionMessageTrigger Messenger="{Binding Messenger}" MessageKey="FromMain">
            <l:TransitionInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False"/>
        </l:InteractionMessageTrigger>
        
        <l:InteractionMessageTrigger MessageKey="Confirm" Messenger="{Binding Messenger}">
            <l:ConfirmationDialogInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False"/>
        </l:InteractionMessageTrigger>
    </i:Interaction.Triggers>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="{Binding UpperRowLength, Mode=TwoWay}"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="{Binding LowerRowLength, Mode=TwoWay}"/>
        </Grid.RowDefinitions>
        <DockPanel>
            <Grid DockPanel.Dock="Bottom">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Button Content="選択した項目を削除" Height="24" Grid.Column="0"
                        IsEnabled="{Binding IsQueueDirSelected}" Command="{Binding DeleteQueueDirCommand}"/>
                <Button Content="完了した項目を削除" Height="24" Grid.Column="1"
                        Command="{Binding RemoveCompletedAllCommand}"/>
            </Grid>
            <Grid Grid.Row="0" Margin="0">
                <ListView
                  x:Name="QueueList"
                  ItemsSource="{Binding Model.QueueItems}" 
                  SelectedItem="{Binding SelectedDir, Mode=TwoWay}" 
                  PreviewDragOver="ListBox_PreviewDragOver" 
                  Drop="ListBox_Drop" AllowDrop="True" 
                  c:GridViewSort.AutoSort="True">
                    <ListView.View>
                        <GridView>
                            <GridViewColumn Header="モード" DisplayMemberBinding="{Binding ModeString}" c:GridViewSort.PropertyName="ModeString"/>
                            <GridViewColumn Header="ディレクトリ" c:GridViewSort.PropertyName="Path">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding Path}" ToolTip="{Binding Path}"/>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>
                            <GridViewColumn Header="プロファイル" c:GridViewSort.PropertyName="Profile">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding Profile}">
                                            <TextBlock.ToolTip>
                                                <TextBlock>
                                            <Run Text="{Binding Profile}"/>@<Run Text="{Binding ProfileLastUpdate}"/>更新
                                                </TextBlock>
                                            </TextBlock.ToolTip>
                                </TextBlock>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>
                            <GridViewColumn Header="最終追加日時" c:GridViewSort.PropertyName="LastAdd">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding LastAdd}" ToolTip="{Binding LastAdd}"/>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>
                            <GridViewColumn Header="アイテム数" DisplayMemberBinding="{Binding Items.Count}" c:GridViewSort.PropertyName="Items.Count"/>
                            <GridViewColumn Header="アクティブ" DisplayMemberBinding="{Binding Active}" c:GridViewSort.PropertyName="Active"/>
                            <GridViewColumn Header="エンコード中" DisplayMemberBinding="{Binding Encoding}" c:GridViewSort.PropertyName="Encoding"/>
                            <GridViewColumn Header="完了" DisplayMemberBinding="{Binding Complete}" c:GridViewSort.PropertyName="Complete"/>
                            <GridViewColumn Header="ロゴ待ち" DisplayMemberBinding="{Binding Pending}" c:GridViewSort.PropertyName="Pending"/>
                            <GridViewColumn Header="失敗" DisplayMemberBinding="{Binding Fail}" c:GridViewSort.PropertyName="Fail"/>
                        </GridView>
                    </ListView.View>
                    <ListView.ItemContainerStyle>
                        <Style TargetType="ListViewItem">
                            <Setter Property="IsSelected" Value="{Binding IsSelected}"/>
                        </Style>
                    </ListView.ItemContainerStyle>
                    <ListView.ContextMenu>
                        <ContextMenu>
                            <MenuItem Header="選択した項目を削除" IsEnabled="{Binding IsQueueDirSelected}" Command="{Binding DeleteQueueDirCommand}"/>
                            <MenuItem Header="完了した項目を削除" Command="{Binding RemoveCompletedAllCommand}"/>
                        </ContextMenu>
                    </ListView.ContextMenu>
                </ListView>
                <TextBlock Text="ここにエンコードするファイルorフォルダをD&amp;D" FontSize="20"
                           HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="#FFBDBDBD">
                    <TextBlock.Style>
                        <Style TargetType="TextBlock">
                            <Setter Property="Visibility" Value="Visible"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding HasItems, ElementName=QueueList}" Value="True">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>
            </Grid>
        </DockPanel>

        <GridSplitter ResizeDirection="Rows" VerticalAlignment="Center" Grid.Row="1" Height="5" HorizontalAlignment="Stretch"/>

        <DockPanel Grid.Row="2">
            <DockPanel.Resources>
                <CollectionViewSource x:Key="ProfileList" Source="{Binding ProfileList}"/>
                <CollectionViewSource x:Key="AutoSelectList" Source="{Binding AutoSelectList}"/>
                <DataTemplate DataType="{x:Type m:DisplayAutoSelect}">
                    <TextBlock>自動選択_<Run Text="{Binding Path=Model.Name}"/></TextBlock>
                </DataTemplate>
            </DockPanel.Resources>

            <Expander DockPanel.Dock="Top" Header="操作パネル" IsExpanded="{Binding IsPanelOpen, Mode=TwoWay}">
                <DockPanel>
                    <UniformGrid Columns="3" DockPanel.Dock="Top">
                        <Button Margin="3" Height="24" Content="状態リセット" Command="{Binding RetryCommand}"
                                ToolTip="アイテムを追加直後の状態に戻します。つまり、再エンコードされます"/>
                        <Button Margin="3" Height="24" Content="プロファイル再適用" Command="{Binding RetryUpdateCommand}"
                                ToolTip="プロファイルが更新されていた場合、新しい設定を適用します"/>
                        <Button Margin="3" Height="24" Content="複製" Command="{Binding ReAddCommand}"
                                ToolTip="アイテムを同じ設定で複製します"/>
                        <c:DropDownMenuButton Margin="3" Height="24" Content="プロファイル変更">
                            <c:DropDownMenuButton.Style>
                                <Style BasedOn="{StaticResource ButtonStyle}" TargetType="c:DropDownMenuButton"/>
                            </c:DropDownMenuButton.Style>
                            <c:DropDownMenuButton.DropDownContextMenu>
                                <ContextMenu>
                                    <ContextMenu.ItemsSource>
                                        <CompositeCollection>
                                            <CollectionContainer Collection="{Binding Source={StaticResource AutoSelectList}}"/>
                                            <CollectionContainer Collection="{Binding Source={StaticResource ProfileList}}"/>
                                        </CompositeCollection>
                                    </ContextMenu.ItemsSource>
                                    <ContextMenu.ItemContainerStyle>
                                        <Style TargetType="MenuItem">
                                            <Setter Property="Header" Value="{Binding Path=Item}"/>
                                            <Setter Property="Command" Value="{Binding Path=SelectedCommand}"/>
                                        </Style>
                                    </ContextMenu.ItemContainerStyle>
                                </ContextMenu>
                            </c:DropDownMenuButton.DropDownContextMenu>
                        </c:DropDownMenuButton>
                        <Button Margin="3" Height="24" Content="キャンセル" Command="{Binding CancelCommand}"/>
                        <Button Margin="3" Height="24" Content="削除" Command="{Binding RemoveCommand}"/>
                    </UniformGrid>
                    <DockPanel>
                        <TextBlock Text="検索" VerticalAlignment="Center"/>
                        <Button DockPanel.Dock="Right" Content="☓" Width="18" Command="{Binding ClearSearchWordCommand}" 
                                IsTabStop="False" Focusable="False"/>
                        <TextBox Margin="3" Text="{Binding SearchWord, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                    </DockPanel>
                </DockPanel>
            </Expander>
            
            <Button DockPanel.Dock="Bottom" Content="キューを凍結" Command="{Binding TogglePauseCommand, Mode=OneWay}"
                    ToolTip="凍結状態では新しいエンコードは始まりません。&#xa;キュー操作時に意図しないエンコード開始を防ぐには、キューを凍結してください。">
                <Button.Style>
                    <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                        <Setter Property="Foreground" Value="#FFA4A4A4"/>
                        <Setter Property="Background" Value="White"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Model.IsPaused}" Value="True">
                                <Setter Property="Foreground" Value="Black"/>
                                <Setter Property="Background" Value="Yellow"/>
                                <Setter Property="FontWeight" Value="Bold"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>

            <ListBox ItemsSource="{Binding SelectedDir.Items}"
                 ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                 SelectionMode="Extended">
                <ListBox.ItemContainerStyle>
                    <Style TargetType="{x:Type ListBoxItem}">
                        <Setter Property="IsSelected" Value="{Binding IsSelected}"/>
                        <Setter Property="OverridesDefaultStyle" Value="True" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ContentControl}">
                                    <Border Background="{TemplateBinding Background}">
                                        <ContentPresenter />
                                    </Border>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsComplete}" Value="True">
                                <Setter Property="Background" Value="#A0FFFF"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsEncoding}" Value="True">
                                <Setter Property="Background" Value="Green"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsError}" Value="True">
                                <Setter Property="Background" Value="Red"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsPending}" Value="True">
                                <Setter Property="Background" Value="Yellow"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsCanceled}" Value="True">
                                <Setter Property="Foreground" Value="Gray"/>
                            </DataTrigger>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="Background" Value="Plum" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="LightGray" />
                            </Trigger>

                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding DataContext.Model.Setting.HideOneSeg, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBox}}}" Value="True" />
                                    <Condition Binding="{Binding IsTooSmall}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </MultiDataTrigger>
                        </Style.Triggers>
                    </Style>
                </ListBox.ItemContainerStyle>
                <ListBox.ItemTemplate>
                    <DataTemplate>
                        <DockPanel>
                            <DockPanel Width="100" ToolTip="{Binding ServiceString, Mode=OneWay}" Margin="0,0,5,0">
                                <TextBlock DockPanel.Dock="Top"><Run Text="{Binding TsTimeString, Mode=OneWay}" /></TextBlock>
                                <TextBlock Text="{Binding ServiceString, Mode=OneWay}"/>
                            </DockPanel>
                            <Separator Style="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}"/>
                            <ComboBox Height="20" ToolTip="優先度" DockPanel.Dock="Right"
                                ItemsSource="{Binding DataContext.Model.PriorityList, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"
                                SelectedItem="{Binding Priority, Mode=TwoWay}"/>
                            <TextBlock DockPanel.Dock="Top" Margin="0,0,5,0" Text="{Binding Model.FileName, Mode=OneWay}">
                                <TextBlock.ToolTip>
                                    <TextBlock>
                                    <Run Text="{Binding Model.FileName, Mode=OneWay}"/>
                                    <LineBreak/>ジャンル: <Run Text="{Binding GenreString, Mode=OneWay}"/>
                                    <LineBreak/>映像サイズ: <Run Text="{Binding VideoSizeString, Mode=OneWay}"/>
                                    </TextBlock>
                                </TextBlock.ToolTip>
                        </TextBlock>
                            <TextBlock Margin="0,0,5,0"><Run Text="状態: "/><Run Text="{Binding StateString, Mode=OneWay}" /><Run Text=" "/><Run ToolTip="{Binding Model.FailReason, Mode=OneWay}" Text="{Binding Model.FailReason, Mode=OneWay}" /></TextBlock>
                        </DockPanel>
                    </DataTemplate>
                </ListBox.ItemTemplate>
                <ListBox.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="ロゴ生成" Command="{Binding OpenLogoAnalyzeCommand}" IsEnabled="{Binding SelectedDir.IsQueueFileSelected}" />
                        <MenuItem Header="ロゴ生成(TS解析あり)" Command="{Binding OpenLogoAnalyzeSlimTsCommand}" IsEnabled="{Binding SelectedDir.IsQueueFileSelected}" />
                        <Separator />
                        <MenuItem Header="プロファイル変更" IsEnabled="{Binding SelectedDir.IsQueueFileSelected}">
                            <MenuItem.ItemsSource>
                                <CompositeCollection>
                                    <CollectionContainer Collection="{Binding Source={StaticResource AutoSelectList}}"/>
                                    <CollectionContainer Collection="{Binding Source={StaticResource ProfileList}}"/>
                                </CompositeCollection>
                            </MenuItem.ItemsSource>
                            <MenuItem.ItemContainerStyle>
                                <Style TargetType="MenuItem">
                                    <Setter Property="Header" Value="{Binding Path=Item}"/>
                                    <Setter Property="Command" Value="{Binding Path=SelectedCommand}"/>
                                </Style>
                            </MenuItem.ItemContainerStyle>
                        </MenuItem>
                        <Separator />
                        <MenuItem Header="状態リセット" Command="{Binding RetryCommand}" IsEnabled="{Binding SelectedDir.IsQueueFileSelected}"
                              ToolTip="アイテムを追加直後の状態に戻します。つまり、再エンコードされます" />
                        <MenuItem Header="プロファイル再適用" Command="{Binding RetryUpdateCommand}" IsEnabled="{Binding SelectedDir.IsQueueFileSelected}"
                              ToolTip="プロファイルが更新されていた場合、新しい設定を適用します" />
                        <MenuItem Header="複製" Command="{Binding ReAddCommand}" IsEnabled="{Binding SelectedDir.IsQueueFileSelected}"
                              ToolTip="アイテムを同じ設定で複製します" />
                        <Separator />
                        <MenuItem Header="キャンセル" Command="{Binding CancelCommand}" IsEnabled="{Binding SelectedDir.IsQueueFileSelected}" />
                        <MenuItem Header="削除" Command="{Binding RemoveCommand}" IsEnabled="{Binding SelectedDir.IsQueueFileSelected}"/>
                        <Separator />
                        <MenuItem Header="完了した項目を削除" Command="{Binding RemoveCompletedItemsCommand}"/>
                        <MenuItem Header="ファイルの場所を開く" IsEnabled="{Binding SelectedDir.IsQueueFileSelected}" Command="{Binding OpenFileInExplorerCommand}" />
                        <MenuItem Header="ワンセグを表示しない" IsChecked="{Binding Model.Setting.HideOneSeg, Mode=TwoWay}" IsCheckable="True" />
                    </ContextMenu>
                </ListBox.ContextMenu>
            </ListBox>
        </DockPanel>
    </Grid>
</UserControl>
