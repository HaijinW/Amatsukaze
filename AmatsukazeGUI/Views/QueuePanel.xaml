<UserControl x:Class="Amatsukaze.Views.QueuePanel"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
             xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:vm="clr-namespace:Amatsukaze.ViewModels" 
             xmlns:m="clr-namespace:Amatsukaze.Models" 
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300"
             d:DataContext="{d:DesignInstance {x:Type vm:QueueViewModel}}">

    <i:Interaction.Triggers>
        <l:InteractionMessageTrigger Messenger="{Binding Messenger}" MessageKey="FromMain">
            <l:TransitionInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False"/>
        </l:InteractionMessageTrigger>
        
        <l:InteractionMessageTrigger MessageKey="Confirm" Messenger="{Binding Messenger}">
            <l:ConfirmationDialogInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False"/>
        </l:InteractionMessageTrigger>
    </i:Interaction.Triggers>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="{Binding UpperRowLength, Mode=TwoWay}"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="{Binding LowerRowLength, Mode=TwoWay}"/>
        </Grid.RowDefinitions>
        <Grid.Resources>
            <DataTemplate DataType="{x:Type m:DisplayQueueDirectory}">
                <TextBlock>
                    <TextBlock.ToolTip>
                        <TextBlock>
                            <Run Text="{Binding Profile}"/>@<Run Text="{Binding LastUpdate}"/>更新
                        </TextBlock>
                    </TextBlock.ToolTip>
                    <Run Text="{Binding ModeString}"/>: <Run Text="{Binding Path, Mode=OneWay}"/>(<Run Text="{Binding Items.Count, Mode=OneWay}"/>)(<Run Text="{Binding Profile}"/>)
                </TextBlock>
            </DataTemplate>
        </Grid.Resources>
        <ListBox Grid.Row="0" Margin="0" ItemsSource="{Binding Model.QueueItems}" SelectedIndex="{Binding QueueItemSelectedIndex, Mode=TwoWay}" PreviewDragOver="ListBox_PreviewDragOver" Drop="ListBox_Drop" AllowDrop="True" ToolTip="ここにフォルダorファイルをD&amp;D">
            <ListBox.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="選択した項目を削除" IsEnabled="{Binding IsQueueItemSelected}" Command="{Binding DeleteQueueItemCommand}"/>
                </ContextMenu>
            </ListBox.ContextMenu>
        </ListBox>
        
        <GridSplitter ResizeDirection="Rows" VerticalAlignment="Center" Grid.Row="1" Height="5" HorizontalAlignment="Stretch"/>
        
        <ListBox Grid.Row="2" Margin="0" ItemsSource="{Binding SetectedQueueItem.Items}"
                 ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                 SelectionMode="Extended">
            <ListBox.ItemContainerStyle>
                <Style TargetType="ListBoxItem">
                    <Setter Property="IsSelected" Value="{Binding Path=IsSelected}"/>
                    <Setter Property="OverridesDefaultStyle" Value="True" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ContentControl}">
                                <Border Background="{TemplateBinding Background}">
                                    <ContentPresenter />
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsComplete}" Value="True">
                            <Setter Property="Background" Value="Cyan"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsEncoding}" Value="True">
                            <Setter Property="Background" Value="Green"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsError}" Value="True">
                            <Setter Property="Background" Value="Red"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsPending}" Value="True">
                            <Setter Property="Background" Value="Yellow"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsCanceled}" Value="True">
                            <Setter Property="Foreground" Value="Gray"/>
                        </DataTrigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="Plum" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="LightGray" />
                        </Trigger>
                        
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding DataContext.Model.Setting.HideOneSeg, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBox}}}" Value="True" />
                                <Condition Binding="{Binding IsTooSmall}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" Value="Collapsed"/>
                        </MultiDataTrigger>
                    </Style.Triggers>
                </Style>
            </ListBox.ItemContainerStyle>
            <ListBox.ItemTemplate>
                <DataTemplate>
                    <DockPanel>
                        <DockPanel Width="100" ToolTip="{Binding ServiceString, Mode=OneWay}" Margin="0,0,5,0">
                            <TextBlock DockPanel.Dock="Top"><Run Text="{Binding TsTimeString, Mode=OneWay}" /></TextBlock>
                            <TextBlock Text="{Binding ServiceString, Mode=OneWay}"/>
                        </DockPanel>
                        <Separator Style="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}"/>
                        <ComboBox Height="20" ToolTip="優先度" DockPanel.Dock="Right"
                                ItemsSource="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Path=DataContext.Model.PriorityList}"
                                SelectedItem="{Binding Priority, Mode=TwoWay}"/>
                        <TextBlock DockPanel.Dock="Top" Margin="0,0,5,0" Text="{Binding Model.FileName, Mode=OneWay}" ToolTip="{Binding Model.FileName, Mode=OneWay}"/>
                        <TextBlock Margin="0,0,5,0"><Run Text="状態: "/><Run Text="{Binding StateString, Mode=OneWay}" /> <Run ToolTip="{Binding Model.FailReason, Mode=OneWay}" Text="{Binding Model.FailReason, Mode=OneWay}" /></TextBlock>
                    </DockPanel>
                </DataTemplate>
            </ListBox.ItemTemplate>
            <ListBox.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="ロゴ生成" Command="{Binding OpenLogoAnalyzeCommand}" IsEnabled="{Binding IsQueueFileSelected}" />
                    <MenuItem Header="ロゴ生成(TS解析あり)" Command="{Binding OpenLogoAnalyzeSlimTsCommand}" IsEnabled="{Binding IsQueueFileSelected}" />
                    <MenuItem Header="リトライ" Command="{Binding RetryCommand}" IsEnabled="{Binding IsQueueFileSelected}"
                              ToolTip="プロファイルの設定が変わってる場合でも、投入時の設定でエンコードします" />
                    <MenuItem Header="再投入" Command="{Binding ReAddCommand}" IsEnabled="{Binding IsQueueFileSelected}"
                              ToolTip="プロファイルの設定が変わった場合、新しい設定でエンコードします" />
                    <MenuItem Header="キャンセル" Command="{Binding CancelCommand}" IsEnabled="{Binding IsQueueFileSelected}" />
                    <MenuItem Header="ファイルの場所を開く" IsEnabled="{Binding IsQueueFileSelected}" Command="{Binding OpenFileInExplorerCommand}" />
                    <MenuItem Header="ワンセグを表示しない" IsChecked="{Binding Model.Setting.HideOneSeg, Mode=TwoWay}" IsCheckable="True" />
                </ContextMenu>
            </ListBox.ContextMenu>
        </ListBox>
    </Grid>
</UserControl>
