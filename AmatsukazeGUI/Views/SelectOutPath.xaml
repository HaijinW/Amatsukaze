<Window x:Class="Amatsukaze.Views.SelectOutPath"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:v="clr-namespace:Amatsukaze.Views"
        xmlns:vm="clr-namespace:Amatsukaze.ViewModels"
        xmlns:m="clr-namespace:Amatsukaze.Models" 
        Title="Amatsukaze ファイル追加" SizeToContent="Height" Width="400" Loaded="Window_Loaded">

    <Window.DataContext>
        <vm:SelectOutPathViewModel/>
    </Window.DataContext>

    <Window.Resources>
        <ResourceDictionary Source="CommonResources.xaml"/>
    </Window.Resources>

    <i:Interaction.Triggers>

        <!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
        <!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
        <!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->

        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <l:InteractionMessageTrigger MessageKey="Confirm" Messenger="{Binding Messenger}">
            <l:ConfirmationDialogInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False"/>
        </l:InteractionMessageTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->
        <l:InteractionMessageTrigger MessageKey="Close" Messenger="{Binding Messenger}">
            <l:WindowInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False"/>
        </l:InteractionMessageTrigger>

    </i:Interaction.Triggers>

    <StackPanel Margin="5">
        <TextBlock Margin="2" Text="{Binding InputInfoText, Mode=OneWay}" TextWrapping="Wrap" />
        <DockPanel>
            <DockPanel.Resources>
                <CollectionViewSource x:Key="ProfileList" Source="{Binding Model.ProfileList}"/>
                <CollectionViewSource x:Key="AutoSelectList" Source="{Binding Model.AutoSelectList}"/>
                <DataTemplate DataType="{x:Type m:DisplayAutoSelect}">
                    <TextBlock>自動選択_<Run Text="{Binding Path=Model.Name}"/></TextBlock>
                </DataTemplate>
            </DockPanel.Resources>
            <ComboBox Width="40" HorizontalAlignment="Left" DockPanel.Dock="Right" 
                              ItemsSource="{Binding Model.PriorityList}" 
                              SelectedItem="{Binding Item.Outputs[0].Priority, Mode=TwoWay}"/>
            <TextBlock Text="優先度:" VerticalAlignment="Center" DockPanel.Dock="Right"/>
            <TextBlock Text="プロファイル" VerticalAlignment="Center"/>
            <ComboBox SelectedItem="{Binding SelectedProfile, Mode=TwoWay}">
                <ComboBox.ItemsSource>
                    <CompositeCollection>
                        <CollectionContainer Collection="{Binding Source={StaticResource AutoSelectList}}"/>
                        <CollectionContainer Collection="{Binding Source={StaticResource ProfileList}}"/>
                    </CompositeCollection>
                </ComboBox.ItemsSource>
            </ComboBox>
        </DockPanel>
        <DockPanel>
            <CheckBox Content="キューを凍結して追加" IsChecked="{Binding PauseStart, Mode=TwoWay}" DockPanel.Dock="Right" VerticalAlignment="Center"/>
            <TextBlock Margin="2" Text="出力先フォルダ" VerticalAlignment="Top" />
        </DockPanel>
        <TextBox Margin="2" Height="23" TextWrapping="Wrap" Text="{Binding OutPath, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Top" PreviewDragOver="textBox_PreviewDragOver" Drop="textBox_Drop"/>
        
        <TextBlock Margin="2" TextWrapping="Wrap" Text="{Binding Description}" Foreground="Red"/>
        
        <Button Margin="2" Height="Auto" Command="{Binding OkCommand, Mode=OneWay}">
            <TextBlock TextAlignment="Center" TextWrapping="Wrap">
                <Run FontSize="20" Text="通常モード"/><LineBreak/><Run Text="入力ファイルは、エンコード後 succeededフォルダ（成功時）、failedフォルダ（失敗時）に移動します。同名出力ファイルは上書きします。"/>
            </TextBlock>
        </Button>

        <Button Margin="2" Height="Auto" Command="{Binding TestCommand, Mode=OneWay}">
            <TextBlock TextAlignment="Center" TextWrapping="Wrap">
                <Run FontSize="20" Text="テストモード"/><LineBreak/><Run Text="エンコード後、入力ファイルは移動しません。"/><LineBreak/><Run Text="同名ファイルがある場合は上書きせず、別名で出力します。"/>
            </TextBlock>
        </Button>

        <Button Margin="2" Height="Auto" Command="{Binding SearchCommand, Mode=OneWay}">
            <TextBlock TextAlignment="Center" TextWrapping="Wrap">
                <Run FontSize="20" Text="DRCS外字サーチ"/><LineBreak/><Run Text="入力ファイルを読んで未登録のDRCS外字を見つけます。エンコードはしません。DRCS外字登録をまとめて処理したいときに使ってください。"/>
            </TextBlock>
        </Button>
        <Button Margin="2" Height="50" >
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="Click">
                    <l:WindowInteractionMessageAction>
                        <l:DirectInteractionMessage>
                            <l:WindowActionMessage/>
                        </l:DirectInteractionMessage>
                    </l:WindowInteractionMessageAction>
                </i:EventTrigger>
            </i:Interaction.Triggers>
            <TextBlock TextAlignment="Center" TextWrapping="Wrap">
                <Run FontSize="20" Text="キャンセル"/>
            </TextBlock>
        </Button>
    </StackPanel>
</Window>
